generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum VoteType {
  UP
  DOWN
}

model Post {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  editedAt    DateTime  @default(now()) @updatedAt
  title       String
  content     String
  imageUrl    String?
  authorId    String
  authorName  String
  subredditId String
  Subreddit   Subreddit @relation(fields: [subredditId], references: [id], onDelete: Cascade)
  Comments    Comment[]
  Votes       Vote[]
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?
}

model User {
  id             String  @id @default(uuid())
  profilePicture String?
  username       String  @unique
  bio            String?
  SavedPosts     Post[]
}

model Subreddit {
  id          String   @id @unique @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  description String
  authorId    String
  authorName  String
  Posts       Post[]
  members     String[]
}

model Comment {
  id         String        @id @default(uuid())
  createdAt  DateTime      @default(now())
  editedAt   DateTime      @default(now()) @updatedAt
  content    String
  authorId   String
  authorName String
  postId     String
  Post       Post          @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parentId   String?
  Parent     Comment?      @relation("CommentToComment", fields: [parentId], references: [id])
  Comments   Comment[]     @relation("CommentToComment")
  Votes      CommentVote[]
}

model CommentVote {
  id         String   @id @default(uuid())
  commentId  String
  authorId   String
  authorName String
  Comment    Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  type       VoteType
}

model Vote {
  id         String   @id @default(uuid())
  postId     String
  authorId   String
  authorName String
  Post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  type       VoteType
}
